#!/usr/bin/env python

"""
Analyze and visualize inference logs generated by InferenceLogger for so-100.
"""

import argparse
from pathlib import Path

import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns


def load_inference_data(log_dir: Path):
    """Load all CSV files from the inference log directory."""
    log_dir = Path(log_dir)

    data = {}

    # Look for CSV files
    csv_files = list(log_dir.glob("*.csv"))
    if not csv_files:
        print(f"No CSV files found in {log_dir}")
        return data

    for csv_file in csv_files:
        try:
            df = pd.read_csv(csv_file)
            key = csv_file.stem  # filename without extension
            data[key] = df
            print(f"Loaded {len(df)} records from {csv_file.name}")
        except Exception as e:
            print(f"Error loading {csv_file}: {e}")

    return data


def plot_servo_positions(robot_state_df):
    """Plot servo positions over time."""
    if robot_state_df is None or robot_state_df.empty:
        print("No robot state data available")
        return

    # Find position columns
    pos_columns = [col for col in robot_state_df.columns if ".pos" in col and "raw" not in col]

    if not pos_columns:
        print("No servo position data found")
        return

    plt.figure(figsize=(12, 8))

    for i, col in enumerate(pos_columns):
        plt.subplot(len(pos_columns), 1, i + 1)
        plt.plot(robot_state_df["timestamp"], robot_state_df[col], label=col)
        plt.ylabel("Position")
        plt.title(f"Servo Position: {col}")
        plt.grid(True)

    plt.xlabel("Time (s)")
    plt.tight_layout()
    plt.savefig("servo_positions.png", dpi=150, bbox_inches="tight")
    print("üìä Servo positions plot saved as servo_positions.png")


def plot_policy_outputs(policy_df):
    """Plot policy outputs and inference timing."""
    if policy_df is None or policy_df.empty:
        print("No policy data available")
        return

    # Find action columns
    action_columns = [col for col in policy_df.columns if col.startswith("action_")]

    if not action_columns:
        print("No policy action data found")
        return

    fig, axes = plt.subplots(2, 1, figsize=(12, 10))

    # Plot actions
    for col in action_columns:
        axes[0].plot(policy_df["timestamp"], policy_df[col], label=col.replace("action_", ""))
    axes[0].set_ylabel("Action Value")
    axes[0].set_title("Policy Action Outputs")
    axes[0].legend()
    axes[0].grid(True)

    # Plot inference timing
    if "inference_time_ms" in policy_df.columns:
        axes[1].plot(policy_df["timestamp"], policy_df["inference_time_ms"], "r-", linewidth=2)
        axes[1].set_ylabel("Inference Time (ms)")
        axes[1].set_title("Policy Inference Timing")
        axes[1].grid(True)

        # Add statistics
        mean_time = policy_df["inference_time_ms"].mean()
        std_time = policy_df["inference_time_ms"].std()
        max_time = policy_df["inference_time_ms"].max()
        axes[1].axhline(mean_time, color="g", linestyle="--", alpha=0.7, label=f"Mean: {mean_time:.1f}ms")
        axes[1].axhline(
            mean_time + std_time,
            color="orange",
            linestyle="--",
            alpha=0.7,
            label=f"+1œÉ: {mean_time + std_time:.1f}ms",
        )
        axes[1].legend()

        print("üìà Inference timing stats:")
        print(f"   Mean: {mean_time:.1f}ms")
        print(f"   Std:  {std_time:.1f}ms")
        print(f"   Max:  {max_time:.1f}ms")

    plt.xlabel("Time (s)")
    plt.tight_layout()
    plt.savefig("policy_outputs.png", dpi=150, bbox_inches="tight")
    print("üìä Policy outputs plot saved as policy_outputs.png")


def plot_correlation_matrix(robot_state_df):
    """Plot correlation matrix between servo positions."""
    if robot_state_df is None or robot_state_df.empty:
        print("No robot state data available")
        return

    # Find position columns
    pos_columns = [col for col in robot_state_df.columns if ".pos" in col and "raw" not in col]

    if len(pos_columns) < 2:
        print("Need at least 2 servo positions for correlation analysis")
        return

    # Calculate correlation matrix
    pos_data = robot_state_df[pos_columns]
    correlation_matrix = pos_data.corr()

    plt.figure(figsize=(10, 8))
    sns.heatmap(
        correlation_matrix,
        annot=True,
        cmap="coolwarm",
        center=0,
        square=True,
        fmt=".2f",
        cbar_kws={"label": "Correlation"},
    )
    plt.title("Servo Position Correlation Matrix")
    plt.tight_layout()
    plt.savefig("servo_correlation.png", dpi=150, bbox_inches="tight")
    print("üìä Servo correlation matrix saved as servo_correlation.png")


def generate_summary_report(data):
    """Generate a text summary report."""
    with open("inference_summary.txt", "w") as f:
        f.write("INFERENCE LOG ANALYSIS SUMMARY\n")
        f.write("=" * 50 + "\n\n")

        for key, df in data.items():
            f.write(f"{key.upper()} DATA:\n")
            f.write(f"  Records: {len(df)}\n")
            f.write(f"  Columns: {list(df.columns)}\n")

            if "timestamp" in df.columns and len(df) > 1:
                duration = df["timestamp"].max() - df["timestamp"].min()
                f.write(f"  Duration: {duration:.2f} seconds\n")
                f.write(f"  Frequency: {len(df) / duration:.1f} Hz\n")

            # Add specific stats for different data types
            if "robot_state" in key and any(".pos" in col for col in df.columns):
                pos_columns = [col for col in df.columns if ".pos" in col and "raw" not in col]
                f.write(f"  Servo positions tracked: {len(pos_columns)}\n")
                for col in pos_columns:
                    mean_pos = df[col].mean()
                    std_pos = df[col].std()
                    f.write(f"    {col}: mean={mean_pos:.2f}, std={std_pos:.2f}\n")

            if "policy" in key and "inference_time_ms" in df.columns:
                mean_time = df["inference_time_ms"].mean()
                max_time = df["inference_time_ms"].max()
                f.write(f"  Mean inference time: {mean_time:.1f}ms\n")
                f.write(f"  Max inference time: {max_time:.1f}ms\n")

            f.write("\n")

    print("üìÑ Summary report saved as inference_summary.txt")


def main():
    parser = argparse.ArgumentParser(description="Analyze inference logs")
    parser.add_argument("log_dir", help="Directory containing inference CSV logs")
    parser.add_argument("--no-plots", action="store_true", help="Skip generating plots")

    args = parser.parse_args()

    log_dir = Path(args.log_dir)
    if not log_dir.exists():
        print(f"Error: Directory {log_dir} does not exist")
        return

    print(f"üìÅ Analyzing logs from: {log_dir}")

    # Load data
    data = load_inference_data(log_dir)
    if not data:
        print("No data to analyze")
        return

    # Generate plots if requested
    if not args.no_plots:
        print("\nüìä Generating plots...")

        # Find relevant dataframes
        robot_state_df = None
        policy_df = None

        for key, df in data.items():
            if "robot_state" in key:
                robot_state_df = df
            elif "policy" in key:
                policy_df = df

        plot_servo_positions(robot_state_df)
        plot_policy_outputs(policy_df)
        plot_correlation_matrix(robot_state_df)

    # Generate summary report
    print("\nüìÑ Generating summary report...")
    generate_summary_report(data)

    print("\n‚úÖ Analysis complete! Check the generated files:")
    if not args.no_plots:
        print("   üìä servo_positions.png - Servo position trajectories")
        print("   üìä policy_outputs.png - Policy outputs and timing")
        print("   üìä servo_correlation.png - Servo position correlations")
    print("   üìÑ inference_summary.txt - Summary statistics")


if __name__ == "__main__":
    main()
