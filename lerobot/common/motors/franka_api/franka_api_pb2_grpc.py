# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import lerobot.common.motors.franka_api.franka_api_pb2 as franka__api__pb2


class FrankaServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetJointState = channel.unary_unary(
                '/franka.FrankaService/GetJointState',
                request_serializer=franka__api__pb2.Empty.SerializeToString,
                response_deserializer=franka__api__pb2.JointState.FromString,
                )
        self.GetEEFPose = channel.unary_unary(
                '/franka.FrankaService/GetEEFPose',
                request_serializer=franka__api__pb2.Empty.SerializeToString,
                response_deserializer=franka__api__pb2.Pose.FromString,
                )
        self.GetWrench = channel.unary_unary(
                '/franka.FrankaService/GetWrench',
                request_serializer=franka__api__pb2.Empty.SerializeToString,
                response_deserializer=franka__api__pb2.Wrench.FromString,
                )
        self.SetJointTarget = channel.unary_unary(
                '/franka.FrankaService/SetJointTarget',
                request_serializer=franka__api__pb2.JointState.SerializeToString,
                response_deserializer=franka__api__pb2.StatusResponse.FromString,
                )


class FrankaServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetJointState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEEFPose(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWrench(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetJointTarget(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FrankaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetJointState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetJointState,
                    request_deserializer=franka__api__pb2.Empty.FromString,
                    response_serializer=franka__api__pb2.JointState.SerializeToString,
            ),
            'GetEEFPose': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEEFPose,
                    request_deserializer=franka__api__pb2.Empty.FromString,
                    response_serializer=franka__api__pb2.Pose.SerializeToString,
            ),
            'GetWrench': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWrench,
                    request_deserializer=franka__api__pb2.Empty.FromString,
                    response_serializer=franka__api__pb2.Wrench.SerializeToString,
            ),
            'SetJointTarget': grpc.unary_unary_rpc_method_handler(
                    servicer.SetJointTarget,
                    request_deserializer=franka__api__pb2.JointState.FromString,
                    response_serializer=franka__api__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'franka.FrankaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FrankaService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetJointState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/franka.FrankaService/GetJointState',
            franka__api__pb2.Empty.SerializeToString,
            franka__api__pb2.JointState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEEFPose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/franka.FrankaService/GetEEFPose',
            franka__api__pb2.Empty.SerializeToString,
            franka__api__pb2.Pose.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWrench(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/franka.FrankaService/GetWrench',
            franka__api__pb2.Empty.SerializeToString,
            franka__api__pb2.Wrench.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetJointTarget(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/franka.FrankaService/SetJointTarget',
            franka__api__pb2.JointState.SerializeToString,
            franka__api__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
